function [res,totalPF] = getrpdsummary(file)
% GETRPDSUMMARY  Read in contents of the R/P Distro summary file written by Maestro.
%
% [RES,TOTALPF] = GETRPDSUMMARY(FILE) parses the contents of a specified text 
% file, generated by Maestro (v1.5.0+), that summarizes results for any trials 
% employing the "R/P Distro" protocol.  See the Maestro User's Guide for a 
% full description of the protocol.
%
% Arguments:
%   FILE       A string specifying a valid pathname to the "R/P Distro"
%              summary file.  Required.  The summary file is a plain text 
%              ASCII file.  If you inadvertently pass some other file to 
%              GETRPDSUMMARY, rest assured it will choke in some fashion!
%
% Returns:
%   RES        A 1xN array of structures, where N is the # of distinct 
%              trials listed in the summary file.  Each structure contains 
%              the following fields
%
%                trialname : The Maestro trial's name.
%                resp_type : The measured behavioral response. Will be one of 
%              four possible strings: 'Eye Speed', 'H Eye Speed', 'V Eye Speed', 
%              and 'Eye Motion Dir'.
%                valid_range : A 1x2 array [min max] holding the valid response 
%              range for trial.  The "response" is the subject's eye speed 
%              averaged over a specially designated segment of the trial. 
%                reward_win: A 1x4 array [rwmin rwmax shift nupd], parameters
%              for the trial's response reward window.  If the measured 
%              "response" to a trial falls within [rwmin rwmax], it is tallied 
%              as a "pass"; otherwise, as a "fail". The other two parameters 
%              define a dynamic shift for the reward window -- see Maestro User's
%              Guide for more info. If the reward window is not enabled, 
%              reward_win will be an empty matrix.
%                rew_stats: A 1x2 array [np nf] specifying the # of trial 
%              representations that the subject passed (np) and failed (nf). 
%                curr_samples : A row vector of all "response samples" recorded 
%              in the R/P Distro trial's "current" distribution.
%                prev_samples : A row vector of all "response samples" recorded 
%              in the R/P Distro trial's "previous" distribution.
%
%              The valid response range, reward window parameters, and the 
%              response samples are in the appropriate units: deg/sec if the 
%              behavioral response measured was eye speed, or deg CCW 
%              (0 = rightward) if the response was eye motion direction.
%
%   TOTALPF    A 1x2 array [np nf] listing the total # of "passes" (np) and 
%              "failures" (nf) tallied across all R/P Distro trial presentations 
%              since Maestro started up.
%
% Author: kris bouchard
% Last revision: 3/18/06 (saruffner)
% History:
% 1/26/06 -- First version.
% 3/18/06 -- Modified for Maestro v1.5.0.  There's only one reward window now, 
% defined by min/max bounds, plus two additional parameters "shift" and "nupd".
% Fields reward_win1, reward_win2 replaced by reward_win=[rwmin rwmax shift nupd].
% This new version of getrpdsummary() will NOT handle summary files generated by 
% Maestro versions prior to v1.5.0.
% 4/26/07 -- Modified for Maestro v2.1.1, which introduced 4 alternatives for the 
% behavioral response measured in the R/P Distro trials: H or V eye velocity, 
% overall eye velocity, or the average direction of motion of the eye. Still can 
% handle files generated by Maestro versions 1.5.0 - 2.1.0.
%

error(nargchk(1,1,nargin));
fid  = fopen(char(file),'r');
if( fid < 0 )
   error( 'Unable to open specified file!' );
end
count = 0;

% we catch any errors so we have a chance to close the file before M-file exits
try,
   badformat = 0;
   while 1
      % get next line in file
      crntline = fgets(fid);
      if( ~ischar(crntline) )
         break;
      end

      % store overall pass and fall
      if( strfind(crntline, 'Overall:') ) 
         indx = strfind(crntline,'=');
         totalPF(1) = str2num(crntline(indx(1)+1:strfind(crntline,',')-1));
         totalPF(2) = str2num(crntline(indx(2)+1:end));
      end
    
      % for each trial summarized in the file... Note that we effectively discard any 
      % lines from the previous trial block that were not processed.
      if( strfind(crntline, 'Trial name') )
         count = count+1;

         % store trial name
         res(count).trialname = crntline(strfind(crntline,':')+1:end);

         % As of Maestro v2.1.1, a line was added to indicate the type of behavioral
         % response that was measured. This code block handles that line, if it is 
         % present. If not, it is assumed that the file was created prior to v2.1.1, 
         % in which case the measured response was always eye velocity magnitude.
         crntline = fgets(fid);
         if( isempty(strfind(crntline, 'Measured response type:')) )
            res(count).resp_type = 'Eye Speed';
         else
            res(count).resp_type = crntline(strfind(crntline,':')+1:end);
            crntline = fgets(fid);
         end
         
         % get valid response range from next line
         if( isempty(strfind(crntline, 'Valid response range:')) )
            badformat = 1;
            break;
         end
         b(1) = str2num(crntline(strfind(crntline,'[')+1:strfind(crntline,'to')-2));
         b(2) = str2num(crntline(strfind(crntline,'to')+3:strfind(crntline,']')-1));
         res(count).valid_range = [b(1) b(2)];

         % get reward window, if any, from next line
         crntline = fgets(fid);
         res(count).reward_win = [];
         if( isempty(strfind(crntline, 'Reward Window:')) )
            badformat = 1;
            break;
         end
         if( isempty(strfind(crntline,'NONE')) )
            rwmin = str2num(crntline(strfind(crntline,'[')+1:strfind(crntline,'to')-2));
            rwmax = str2num(crntline(strfind(crntline,'to')+3:strfind(crntline,']')-1));
            equalIdx = strfind(crntline,'=');
            commaIdx = strfind(crntline,',');
            if( length(equalIdx) < 2 | length(commaIdx) < 2 )
               badformat = 1;
               break;
            end
            shift = str2num(crntline(equalIdx(1)+1:commaIdx(2)-1));
            nupd = str2num(crntline(equalIdx(2)+1:end));
            res(count).reward_win = [rwmin rwmax shift nupd];
         end

         % get #passed/failed for this trial from the next line
         crntline = fgets(fid);
         if( isempty(strfind(crntline, '#passed')) )
            badformat = 1;
            break;
         end
         eqidx = strfind(crntline,'=');
         np = str2num(crntline(eqidx(1)+2:strfind(crntline,',')-1));
         nf = str2num(crntline(eqidx(2)+2:end));
         res(count).rew_stats = [np nf];

         % get next line and make sure it starts with "Current"
         crntline = fgets(fid);
         if( isempty(strfind(crntline, 'Current')) )
            badformat = 1;
            break;
         end

         % if there are any samples in the "Current" distribution, save them
         if( str2num(crntline(strfind(crntline,'N =')+4:strfind(crntline,'total')-2)) > 0 )
            crntline = fgets(fid);
            tempvect = str2num(crntline(strfind(crntline,':')+2:end));
            while( isempty(strfind(crntline,'Sample')) )
               crntline = fgets(fid);
               tempvect = [tempvect str2num(crntline)];
            end
            res(count).curr_samples = tempvect;

            % skip over lines defining sample histogram
            while( isempty(strfind(crntline,'Previous')) )
               crntline = fgets(fid);
            end
         else
            res(count).curr_samples = [];
            % read in next line, which summarizes "Previous" distribution
            crntline = fgets(fid);
         end

         % make sure current line summarizes the "Previous" distribution
         if( isempty(strfind(crntline, 'Previous')) )
            badformat = 1;
            break;
         end

         % if there are any samples in the "Previous" distribution, save them
         if( str2num(crntline(strfind(crntline,'N =')+4:strfind(crntline,'total')-2)) > 0 )
            crntline = fgets(fid);
            tempvect = str2num(crntline(strfind(crntline,':')+2:end));
            while( isempty(strfind(crntline,'Sample')) )
               crntline = fgets(fid);
               tempvect = [tempvect str2num(crntline)];
            end
            res(count).prev_samples = tempvect;

            % NOTE: we don't need to skip over the sample histogram. Those lines will be 
            % skipped effectively as we look for the start of the next trial block!
         else
            res(count).prev_samples = [];
         end

      end % DONE processing the summary for a trial
   end % 'while 1'
   fclose(fid);
catch,
   fclose(fid);
end

if( badformat )
   error( 'Bad file format' );
end

